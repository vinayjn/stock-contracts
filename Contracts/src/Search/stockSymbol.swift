// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: stocks/stockSymbol.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
    struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
    typealias Version = _2
}

public struct SymbolSearchResponse {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var symbols: [StockSymbol] = []
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

public struct StockSymbol {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.
    
    var symbol: String = String()
    
    var name: String = String()
    
    var type: String = String()
    
    var region: String = String()
    
    var marketOpen: String = String()
    
    var marketClose: String = String()
    
    var timezone: String = String()
    
    var currency: String = String()
    
    var matchScore: String = String()
    
    var unknownFields = SwiftProtobuf.UnknownStorage()
    
    init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "stocks"

extension SymbolSearchResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".SymbolSearchResponse"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .unique(proto: "symbols", json: "bestMatches"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeRepeatedMessageField(value: &self.symbols)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.symbols.isEmpty {
            try visitor.visitRepeatedMessageField(value: self.symbols, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: SymbolSearchResponse, rhs: SymbolSearchResponse) -> Bool {
        if lhs.symbols != rhs.symbols {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}

extension StockSymbol: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
    static let protoMessageName: String = _protobuf_package + ".StockSymbol"
    static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
        1: .unique(proto: "symbol", json: "1. symbol"),
        2: .unique(proto: "name", json: "2. name"),
        3: .unique(proto: "type", json: "3. type"),
        4: .unique(proto: "region", json: "4. region"),
        5: .unique(proto: "marketOpen", json: "5. marketOpen"),
        6: .unique(proto: "marketClose", json: "6. marketClose"),
        7: .unique(proto: "timezone", json: "7. timezone"),
        8: .unique(proto: "currency", json: "8. currency"),
        9: .unique(proto: "matchScore", json: "9. matchScore"),
    ]
    
    mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
            switch fieldNumber {
            case 1: try decoder.decodeSingularStringField(value: &self.symbol)
            case 2: try decoder.decodeSingularStringField(value: &self.name)
            case 3: try decoder.decodeSingularStringField(value: &self.type)
            case 4: try decoder.decodeSingularStringField(value: &self.region)
            case 5: try decoder.decodeSingularStringField(value: &self.marketOpen)
            case 6: try decoder.decodeSingularStringField(value: &self.marketClose)
            case 7: try decoder.decodeSingularStringField(value: &self.timezone)
            case 8: try decoder.decodeSingularStringField(value: &self.currency)
            case 9: try decoder.decodeSingularStringField(value: &self.matchScore)
            default: break
            }
        }
    }
    
    func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if !self.symbol.isEmpty {
            try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 1)
        }
        if !self.name.isEmpty {
            try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
        }
        if !self.type.isEmpty {
            try visitor.visitSingularStringField(value: self.type, fieldNumber: 3)
        }
        if !self.region.isEmpty {
            try visitor.visitSingularStringField(value: self.region, fieldNumber: 4)
        }
        if !self.marketOpen.isEmpty {
            try visitor.visitSingularStringField(value: self.marketOpen, fieldNumber: 5)
        }
        if !self.marketClose.isEmpty {
            try visitor.visitSingularStringField(value: self.marketClose, fieldNumber: 6)
        }
        if !self.timezone.isEmpty {
            try visitor.visitSingularStringField(value: self.timezone, fieldNumber: 7)
        }
        if !self.currency.isEmpty {
            try visitor.visitSingularStringField(value: self.currency, fieldNumber: 8)
        }
        if !self.matchScore.isEmpty {
            try visitor.visitSingularStringField(value: self.matchScore, fieldNumber: 9)
        }
        try unknownFields.traverse(visitor: &visitor)
    }
    
    static func ==(lhs: StockSymbol, rhs: StockSymbol) -> Bool {
        if lhs.symbol != rhs.symbol {return false}
        if lhs.name != rhs.name {return false}
        if lhs.type != rhs.type {return false}
        if lhs.region != rhs.region {return false}
        if lhs.marketOpen != rhs.marketOpen {return false}
        if lhs.marketClose != rhs.marketClose {return false}
        if lhs.timezone != rhs.timezone {return false}
        if lhs.currency != rhs.currency {return false}
        if lhs.matchScore != rhs.matchScore {return false}
        if lhs.unknownFields != rhs.unknownFields {return false}
        return true
    }
}
