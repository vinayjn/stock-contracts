// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: models/stockQuote.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct StockQuoteResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var quote: StockQuote {
    get {return _storage._quote ?? StockQuote()}
    set {_uniqueStorage()._quote = newValue}
  }
  /// Returns true if `quote` has been explicitly set.
  public var hasQuote: Bool {return _storage._quote != nil}
  /// Clears the value of `quote`. Subsequent reads from it will return its default value.
  public mutating func clearQuote() {_uniqueStorage()._quote = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct StockQuote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var symbol: String = String()

  public var `open`: String = String()

  public var high: String = String()

  public var low: String = String()

  public var price: String = String()

  public var volume: String = String()

  public var latestTradingDay: String = String()

  public var previousClose: String = String()

  public var change: String = String()

  public var changePercent: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "models"

extension StockQuoteResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StockQuoteResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "quote", json: "Global Quote"),
  ]

  fileprivate class _StorageClass {
    var _quote: StockQuote? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _quote = source._quote
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._quote)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._quote {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StockQuoteResponse, rhs: StockQuoteResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._quote != rhs_storage._quote {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension StockQuote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StockQuote"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .unique(proto: "symbol", json: "1. symbol"),
    2: .unique(proto: "open", json: "2. open"),
    3: .unique(proto: "high", json: "3. high"),
    4: .unique(proto: "low", json: "4. low"),
    5: .unique(proto: "price", json: "5. price"),
    6: .unique(proto: "volume", json: "6. volume"),
    7: .unique(proto: "latestTradingDay", json: "7. latest trading day"),
    8: .unique(proto: "previousClose", json: "8. previous close"),
    9: .unique(proto: "change", json: "9. change"),
    10: .unique(proto: "changePercent", json: "10. change percent"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.symbol)
      case 2: try decoder.decodeSingularStringField(value: &self.`open`)
      case 3: try decoder.decodeSingularStringField(value: &self.high)
      case 4: try decoder.decodeSingularStringField(value: &self.low)
      case 5: try decoder.decodeSingularStringField(value: &self.price)
      case 6: try decoder.decodeSingularStringField(value: &self.volume)
      case 7: try decoder.decodeSingularStringField(value: &self.latestTradingDay)
      case 8: try decoder.decodeSingularStringField(value: &self.previousClose)
      case 9: try decoder.decodeSingularStringField(value: &self.change)
      case 10: try decoder.decodeSingularStringField(value: &self.changePercent)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.symbol.isEmpty {
      try visitor.visitSingularStringField(value: self.symbol, fieldNumber: 1)
    }
    if !self.`open`.isEmpty {
      try visitor.visitSingularStringField(value: self.`open`, fieldNumber: 2)
    }
    if !self.high.isEmpty {
      try visitor.visitSingularStringField(value: self.high, fieldNumber: 3)
    }
    if !self.low.isEmpty {
      try visitor.visitSingularStringField(value: self.low, fieldNumber: 4)
    }
    if !self.price.isEmpty {
      try visitor.visitSingularStringField(value: self.price, fieldNumber: 5)
    }
    if !self.volume.isEmpty {
      try visitor.visitSingularStringField(value: self.volume, fieldNumber: 6)
    }
    if !self.latestTradingDay.isEmpty {
      try visitor.visitSingularStringField(value: self.latestTradingDay, fieldNumber: 7)
    }
    if !self.previousClose.isEmpty {
      try visitor.visitSingularStringField(value: self.previousClose, fieldNumber: 8)
    }
    if !self.change.isEmpty {
      try visitor.visitSingularStringField(value: self.change, fieldNumber: 9)
    }
    if !self.changePercent.isEmpty {
      try visitor.visitSingularStringField(value: self.changePercent, fieldNumber: 10)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: StockQuote, rhs: StockQuote) -> Bool {
    if lhs.symbol != rhs.symbol {return false}
    if lhs.`open` != rhs.`open` {return false}
    if lhs.high != rhs.high {return false}
    if lhs.low != rhs.low {return false}
    if lhs.price != rhs.price {return false}
    if lhs.volume != rhs.volume {return false}
    if lhs.latestTradingDay != rhs.latestTradingDay {return false}
    if lhs.previousClose != rhs.previousClose {return false}
    if lhs.change != rhs.change {return false}
    if lhs.changePercent != rhs.changePercent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
